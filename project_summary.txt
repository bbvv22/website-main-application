Project Summary: Dwapor E-commerce Website

This project is a full-stack e-commerce website, consisting of a React-based frontend and a Python FastAPI backend, interacting with a MongoDB database.

1.  **File Structure Overview:**

    *   `/`: Project root, containing general configuration, documentation, and environment backups.
    *   `frontend/`: Contains the entire React application.
    *   `services/api/`: Contains the Python FastAPI backend application.
    *   `backend_env/`: A Python virtual environment for backend development.
    *   `infra/`: Likely for infrastructure-as-code or deployment scripts (currently empty).
    *   `shared/`: (Currently empty) Potentially for shared code or assets between frontend and backend.
    *   `tests/`: Contains project tests.
    *   `.git/`: Git version control metadata.
    *   `.emergent/`: Configuration for the Emergent platform.

2.  **Code Files and Purpose:**

    *   **Frontend (`frontend/`):**
        *   `package.json`, `yarn.lock`: Defines frontend dependencies (managed by Yarn) and project scripts (e.g., `start`, `build`).
        *   `.env`: Environment variables specific to the frontend (e.g., `REACT_APP_API_BASE_URL`).
        *   `craco.config.js`, `postcss.config.js`, `tailwind.config.js`: Configuration files for React App customization, PostCSS, and Tailwind CSS respectively.
        *   `Dockerfile`: Instructions for building a Docker image of the React application, served by Nginx.
        *   `src/App.js`: The main React application component, responsible for defining the application's routes using React Router DOM and integrating various providers (Cart, Auth, Wishlist).
        *   `src/index.js`: The entry point of the React application, rendering the `App` component into the DOM.
        *   `src/App.css`, `src/index.css`: Global CSS styles for the application.
        *   `src/components/`: Directory for reusable UI components.
            *   `Header.js`, `Footer.js`: Navigation and footer components.
            *   `ProductCard.js`: Component to display individual product information.
            *   `CollectionSection.js`: Displays featured products/collections, hardcoded for "Signature Pieces".
            *   `TaglineSection.js`: Displays a prominent tagline on the homepage.
            *   `FounderIntro.js`: Section introducing the founder on the homepage.
            *   `AboutSection.js`: Content for the About Us page.
            *   `ProductGallery.js`: Handles image display for product details.
            *   `ScrollToTop.js`, `ProtectedRoute.js`, `SocialProofToast.js`, `ChatWidget.js`, `NewsletterSection.js`, `QuoteSection.js`, `HeroSection.js`, `Logo.js`: Other utility and UI components.
        *   `src/context/`: React Context API for global state management.
            *   `AuthContext.js`: Manages user authentication state.
            *   `CartContext.js`: Manages the shopping cart state.
            *   `WishlistContext.js`: Manages the user's wishlist state.
        *   `src/data/products.js`: Contains hardcoded JavaScript objects representing product data, including details like name, description, price, sizes, colors, and images. This is the source of truth for product information displayed on the site.
        *   `src/pages/`: Directory for individual page components.
            *   `ProductDetail.js`: Displays detailed information for a single product, including size selection and size chart.
            *   `Orders.js`: Displays a list of user's orders, fetching data from the backend.
            *   `OrderDetails.js`: Displays detailed information for a specific order, including refund/return options.
            *   `Login.js`: User login/signup page.
            *   `Collections.js`: Displays all products, with filtering options.
            *   `Checkout.js`, `OrderSuccess.js`, `Profile.js`, `Wishlist.js`, `PrivacyPolicy.js`, `ShippingDelivery.js`, `ReturnExchange.js`, `FAQ.js`, `TermsOfService.js`: Other functional and informational pages.
            *   `ContactUs.js`: New page for contact information and a message form.
            *   `SizeGuide.js`: New page displaying detailed size charts in CM and Inches.

    *   **Backend (`services/api/`):**
        *   `server.py`: The main FastAPI application. It defines API endpoints (e.g., `/api/status`, `/api/orders`), handles requests, interacts with the MongoDB database, and serves static frontend files.
        *   `requirements.txt`: Lists all Python dependencies required for the backend (e.g., `fastapi`, `uvicorn`, `pymongo`, `motor`).
        *   `.env`: Environment variables for the backend (e.g., `MONGO_URL`, `DB_NAME`).
        *   `Dockerfile`: Instructions for building a Docker image of the FastAPI application.

3.  **Image Storage and Usage:**

    *   **Storage:** Images are primarily stored in `frontend/public/` (e.g., `dwapor-earring.png`, `founder-new.jpg`, `handcrafted-excellence.jpg`, and the `products/` subdirectory containing product images).
    *   **Serving:**
        *   When the frontend is built, these images are copied into the build output.
        *   The backend (`services/api/server.py`) is configured to serve static files from its `build/static` and `build/products` directories, which would contain the built frontend assets including images.
        *   The frontend's `Dockerfile` also uses Nginx to serve the built React app, which includes these images.
    *   **Calling:** Images are referenced directly in the React components using relative paths from the `public` directory (e.g., `<img src="/products/product-1.1.jpg" />`).

4.  **Frameworks and Technologies:**

    *   **Frontend:**
        *   **React:** JavaScript library for building user interfaces.
        *   **React Router DOM:** For declarative routing in the React application.
        *   **Axios:** Promise-based HTTP client for making API requests.
        *   **Framer Motion:** For animations and interactive components.
        *   **Tailwind CSS:** A utility-first CSS framework for styling.
        *   **Yarn:** Package manager for JavaScript dependencies.
    *   **Backend:**
        *   **Python:** The programming language used for the backend.
        *   **FastAPI:** A modern, fast (high-performance) web framework for building APIs with Python 3.7+ based on standard Python type hints.
        *   **Uvicorn:** An ASGI server for running FastAPI applications.
        *   **Motor:** Asynchronous Python driver for MongoDB, used for database interactions.
        *   **Pydantic:** Data validation and settings management using Python type hints.
        *   **python-dotenv:** For loading environment variables from `.env` files.
    *   **Database:**
        *   **MongoDB:** A NoSQL document database, used for storing application data like products and orders.
    *   **Containerization/Deployment:**
        *   **Docker:** Used for containerizing both the frontend and backend applications, enabling consistent deployment across environments.
        *   **Nginx:** A web server used in the frontend Docker image to serve the static React build.
